// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_local_address_picker/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/material.dart' as _i2;
import 'package:flutter_local_address_picker/src/geocoding/nominatim_service.dart'
    as _i3;
import 'package:latlong2/latlong.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

import 'fake_map_provider.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWidget_0 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [GeocodingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeocodingService extends _i1.Mock implements _i3.GeocodingService {
  MockGeocodingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> reverseGeocode(_i5.LatLng? location) =>
      (super.noSuchMethod(
            Invocation.method(#reverseGeocode, [location]),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#reverseGeocode, [location]),
              ),
            ),
          )
          as _i4.Future<String>);
}

/// A class which mocks [FakeMapProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockFakeMapProvider extends _i1.Mock implements _i7.FakeMapProvider {
  MockFakeMapProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get providerName =>
      (super.noSuchMethod(
            Invocation.getter(#providerName),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#providerName),
            ),
          )
          as String);

  @override
  _i2.Widget buildMap({
    required _i2.ValueChanged<_i5.LatLng>? onLocationChanged,
    _i5.LatLng? initialLocation,
    _i2.Widget? markerIcon,
    double? zoom,
    double? markerSize,
    bool? interactive = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#buildMap, [], {
              #onLocationChanged: onLocationChanged,
              #initialLocation: initialLocation,
              #markerIcon: markerIcon,
              #zoom: zoom,
              #markerSize: markerSize,
              #interactive: interactive,
            }),
            returnValue: _FakeWidget_0(
              this,
              Invocation.method(#buildMap, [], {
                #onLocationChanged: onLocationChanged,
                #initialLocation: initialLocation,
                #markerIcon: markerIcon,
                #zoom: zoom,
                #markerSize: markerSize,
                #interactive: interactive,
              }),
            ),
          )
          as _i2.Widget);
}
